# This is the .pro file for the project.
# I'm not an expert in making these, so there might be better ways to do parts
# of this. And parts of it were auto-generated by Qt Creator.

QT += qml quick multimedia opengl

CONFIG += c++11

# This is in case our .obj files make our .qrc files really large.
CONFIG += resources_big 

# The following define makes your compiler emit warnings if you use
# any Qt feature that has been marked deprecated (the exact warnings
# depend on your compiler). Refer to the documentation for the
# deprecated API to know how to port your code away from it.
DEFINES += QT_DEPRECATED_WARNINGS

# You can also make your code fail to compile if it uses deprecated APIs.
# In order to do so, uncomment the following line.
# You can also select to disable deprecated APIs only up to a certain version of Qt.
#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0

SOURCES += \
        augrealityfilter.cpp \
        main.cpp \
        model.cpp \
        object3d.cpp \
        optimization_engine.cpp \
        pose_estimator6d.cpp \
        rendering_engine.cpp \
        signed_distance_transform2d.cpp \
        tclc_histograms.cpp \
        template_view.cpp \
        transformations.cpp


# Default rules for deployment.
qnx: target.path = /tmp/$${TARGET}/bin
else: unix:!android: target.path = /opt/$${TARGET}/bin
!isEmpty(target.path): INSTALLS += target

HEADERS += \
    AugRealityFilter.h \
    model.h \
    object3d.h \
    optimization_engine.h \
    pose_estimator6d.h \
    rendering_engine.h \
    signed_distance_transform2d.h \
    tclc_histograms.h \
    template_view.h \
    transformations.h

# Different rules for Android, Linux PC, and Windows PC.
# I've only tested for armeabi-v7a for Android.
# Have not tested on Mac/iOS.
# YOU WILL WANT TO CHANGE THE PATHS TO POINT TO STUFF ON YOUR PC!
android {
        OPENCV_ANDROID="D:/Libraries/myOpencvAndroidBuild/OpenCV-android-sdk"
        ASSIMP_ANDROID="D:/AndroidLibraries/assimp-android"

        QT += androidextras
        isEmpty(OPENCV_ANDROID) {
            error("Let OPENCV_ANDROID point to the opencv-android-sdk, recommended: v4.0")
        }
        isEmpty(ASSIMP_ANDROID) {
            error("Let ASSIMP_ANDROID point to the assimp android .so file.")
        }

        INCLUDEPATH += "$$OPENCV_ANDROID/sdk/native/jni/include"
        INCLUDEPATH += "$$ASSIMP_ANDROID/build/include"
        INCLUDEPATH += "$$ASSIMP_ANDROID/include"

        LIBS += \
            -L"$$OPENCV_ANDROID/sdk/native/libs/armeabi-v7a" \
            -L"$$OPENCV_ANDROID/sdk/native/3rdparty/libs/armeabi-v7a" \
            -llibtiff \
            -llibjpeg-turbo \
#            -llibjasper \
            -llibpng \
            -lIlmImf \
            -ltbb \
            -lopencv_java4 \
            -L"$$ASSIMP_ANDROID/build/bin"\
            -lassimp

        ANDROID_EXTRA_LIBS = $$OPENCV_ANDROID/sdk/native/libs/armeabi-v7a/libopencv_java4.so
        ANDROID_EXTRA_LIBS += $$ASSIMP_ANDROID/build/bin/libassimp.so

}
win32 { # Even though this says "win32", this is also for 64-bit windows.
    OPENCV_WIN = "D:\Libraries\opencv"
    ASSIMP_WIN = "D:\Libraries\assimp"
    INCLUDEPATH += "$$ASSIMP_WIN\include"
    INCLUDEPATH += "$$OPENCV_WIN\modules\core\include"
    INCLUDEPATH += "$$OPENCV_WIN\modules\imgproc\include"
    INCLUDEPATH += "$$OPENCV_WIN\modules\highgui\include"
    INCLUDEPATH += "$$OPENCV_WIN\modules\calib3d\include"
    INCLUDEPATH += "$$OPENCV_WIN\modules\features2d\include"
    INCLUDEPATH += "$$OPENCV_WIN\modules\imgcodecs\include"
    INCLUDEPATH += "$$OPENCV_WIN\modules\video\include"
    INCLUDEPATH += "$$OPENCV_WIN\modules\videoio\include"
    INCLUDEPATH += "$$OPENCV_WIN\modules\flann\include"

    # From a lot of Googling, it SEEMS this is the best way to handle
    # differences in Debug and Release dependencies. But maybe not.
    CONFIG( debug, debug|release ) {
        # debug
        INCLUDEPATH += "$$OPENCV_WIN\out\build\x64-Debug"

        INCLUDEPATH += "$$ASSIMP_WIN\out\build\x64-Debug\include"

        LIBS += -L"$$OPENCV_WIN\out\build\x64-Debug\lib"
        LIBS += -lopencv_core453d
        LIBS += -lopencv_highgui453d
        LIBS += -lopencv_imgcodecs453d
        LIBS += -lopencv_imgproc453d
        LIBS += -lopencv_features2d453d
        LIBS += -lopencv_calib3d453d

        LIBS += -L"$$ASSIMP_WIN\out\build\x64-Debug\code"
        LIBS += -lassimp-vc142-mtd
    } else {
        # release
        INCLUDEPATH += "$$OPENCV_WIN\out\build\x64-Release"

        INCLUDEPATH += "$$ASSIMP_WIN\out\build\x64-Release\include"

        LIBS += -L"$$OPENCV_WIN\out\build\x64-Release\lib"
        LIBS += -lopencv_core453
        LIBS += -lopencv_highgui453
        LIBS += -lopencv_imgcodecs453
        LIBS += -lopencv_imgproc453
        LIBS += -lopencv_features2d453
        LIBS += -lopencv_calib3d453

        LIBS += -L"$$ASSIMP_WIN\out\build\x64-Release\code"
        LIBS += -lassimp-vc142-mt
    }
}
# I'll add the Linux PC configuration later; as I'm writing this, I don't have
# access to my example file for it. If I forget to update this, feel free to
# remind me somehow, e.g., via a GitHub Issue.


RESOURCES += qml.qrc

ANDROID_ABIS = armeabi-v7a

DISTFILES +=
