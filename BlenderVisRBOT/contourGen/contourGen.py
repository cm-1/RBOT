# Code generated by ChatGPT, then corrected/modified by Christopher Mossman.

import cv2
import numpy as np

def generate_contour_lines(input_image_path, output_image_path, scale_factor=2, interpolation=cv2.INTER_NEAREST):
    # Open the input image
    input_image = cv2.imread(input_image_path, cv2.IMREAD_GRAYSCALE)
    
    print("input:", input_image, input_image.shape, input_image.max(), input_image.min())

    # Scale up the image
    scaled_image = cv2.resize(input_image, None, fx=scale_factor, fy=scale_factor, interpolation=interpolation)

    # Create an empty image for contour lines
    retShape = (scaled_image.shape[0], scaled_image.shape[1], 4)
    contour_image = np.zeros(retShape, dtype=np.uint8)

    # Define contour line colors (you can customize these)
    contour_colors = [
        (255, 0, 0, 255), (0, 255, 0, 255), (0, 0, 0, 255), (0, 255, 0, 255), (255, 0, 0, 255)
    ]

    # Define contour line intervals (you can customize these)
    contour_intervals = [2, 5, 8, 11, 14]  # Example intervals, adjust as needed

    #contour_image[scaled_image == contour_intervals[0]] = contour_colors[0]

    # Draw contour lines
    for thresh, colour in zip(contour_intervals, contour_colors):
        _, thresholded = cv2.threshold(scaled_image, thresh, 255, cv2.THRESH_BINARY_INV)
        contours, _ = cv2.findContours(thresholded, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        cv2.drawContours(contour_image, contours, -1, colour, thickness=1)

    # Save the resulting image
    cv2.imwrite(output_image_path, contour_image)

# Usage example
input_image_path = 'input_heightmap.png'
output_image_path = 'output_contour_lines.png'
generate_contour_lines(input_image_path, output_image_path, scale_factor=2, interpolation=cv2.INTER_NEAREST)
